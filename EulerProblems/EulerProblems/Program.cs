using System.Diagnostics;
using System.IO.Pipes;
using System.Runtime.ExceptionServices;
using System.Security.Principal;

namespace cyxx
{
	public class Program
	{
		#region Problem
		/*
		 *		The four adjacent digits in the 1000-digit number that have 
		 *			the greatest product are 9 × 9 × 8 × 9 = 5832.
		 *			
		 *			73167176531330624919225119674426574742355349194934
		 *			96983520312774506326239578318016984801869478851843
		 *			85861560789112949495459501737958331952853208805511
		 *			12540698747158523863050715693290963295227443043557
		 *			66896648950445244523161731856403098711121722383113
		 *			62229893423380308135336276614282806444486645238749
		 *			30358907296290491560440772390713810515859307960866
		 *			70172427121883998797908792274921901699720888093776
		 *			65727333001053367881220235421809751254540594752243
		 *			52584907711670556013604839586446706324415722155397
		 *			53697817977846174064955149290862569321978468622482
		 *			83972241375657056057490261407972968652414535100474
		 *			82166370484403199890008895243450658541227588666881
		 *			16427171479924442928230863465674813919123162824586
		 *			17866458359124566529476545682848912883142607690042
		 *			24219022671055626321111109370544217506941658960408
		 *			07198403850962455444362981230987879927244284909188
		 *			84580156166097919133875499200524063689912560717606
		 *			05886116467109405077541002256983155200055935729725
		 *			71636269561882670428252483600823257530420752963450
		 *			
		 *		Find the thirteen adjacent digits in the 1000-digit number that 
		 *			have the greatest product. What is the value of this product?
		 */
		#endregion
		#region Input
		public const string Input =
			"73167176531330624919225119674426574742355349194934" +
			"96983520312774506326239578318016984801869478851843" +
			"85861560789112949495459501737958331952853208805511" +
			"12540698747158523863050715693290963295227443043557" +
			"66896648950445244523161731856403098711121722383113" +
			"62229893423380308135336276614282806444486645238749" +
			"30358907296290491560440772390713810515859307960866" +
			"70172427121883998797908792274921901699720888093776" +
			"65727333001053367881220235421809751254540594752243" +
			"52584907711670556013604839586446706324415722155397" +
			"53697817977846174064955149290862569321978468622482" +
			"83972241375657056057490261407972968652414535100474" +
			"82166370484403199890008895243450658541227588666881" +
			"16427171479924442928230863465674813919123162824586" +
			"17866458359124566529476545682848912883142607690042" +
			"24219022671055626321111109370544217506941658960408" +
			"07198403850962455444362981230987879927244284909188" +
			"84580156166097919133875499200524063689912560717606" +
			"05886116467109405077541002256983155200055935729725" +
			"71636269561882670428252483600823257530420752963450";
		#endregion

		#region Solution
		/*
		 *		The function `Eight` takes 1 parameter
		 *			adjacencyDepth: how many sequential 
		 *				numbers the rolling product should use.
		 *				
		 *		Calculates all the posssible products of `adjacencyDepth` sequential numbers in the input string.
		 *		
		 *		Returns the largest product within the calculated products.
		 */
		#endregion

		public static long Eight(int adjacencyDepth)
		{
			var n = Input.Length;
			if (adjacencyDepth <= 0) throw new ArgumentOutOfRangeException("adjacencyDepth", "depth cannot be less than or equal to zero.");
			if (adjacencyDepth >= n) throw new ArgumentOutOfRangeException("adjacencyDepth", "depth cannot be greater than input size.");

			long max = 0;

			for (int i = 0; i < n - adjacencyDepth; ++i)
			{
				long product = 1;
				for (int j = 0; j < adjacencyDepth; ++j)
				{
					product *= _charToInt32(Input[i + j]);
				}

				if (product > max)
					max = product;
			}

			return max;
		}

		private static int _charToInt32(char c) => c - '0';

		public static void Main()
		{
			// calculates products for rolling window of length 1..5
			for (int i = 1; i <= 5; ++i)
				Console.WriteLine(Eight(i));
			Console.Write("\n");

			// Simple case
			Console.WriteLine((Eight(4)));

			// Test case
			Console.WriteLine(Eight(13));
		}
	}
}